name: Create release and publish NuGet

on:
  push:
    branches:
      - 'master' 

permissions:
  contents: write
  
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
    
jobs:
  setup:
    name: Setup environment
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        
  run_test:
    name: Run tests
    runs-on: ubuntu-24.04
    needs: setup
    if: success()
    steps:        
      - name: Run tests
        shell: pwsh
        run: dotnet test --configuration Release .\src\EventLog.UnitTests
        
  compare_strings:
    name: Check project version
    runs-on: ubuntu-24.04
    if: github.event.repository.fork == false
    outputs:
      is_release: ${{ steps.compare_versions.outputs.is_release }}
    steps:
      - name: Get project version from .csproj
        id: version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" ./src/EventLog/EventLog.csproj)
          echo "Project version is $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV      
          
      - name: Get latest tag
        id: tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | head -n 1)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Latest tag: $LATEST_TAG"
        
      - name: Compare Strings
        id: compare_versions
        run: |
          GREATER_VERSION=$(printf "%s\n%s" "$VERSION" "${LATEST_TAG#v}" | sort -V | tail -n 1)
          if [[ "$VERSION" == "$GREATER_VERSION" && "$VERSION" != "${LATEST_TAG#v}" ]]; then
            echo "The new release version is ${LATEST_TAG#v}"
            IS_RELEASE=true
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "The project version is not incremented"
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
                    
  tag_and_push:
    name: Create and push release tag
    runs-on: ubuntu-24.04
    needs: [run_test, compare_strings]
    if: ${{ success() && needs.compare_strings.outputs.is_release == 'true' }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      tag: ${{ github.ref_name }}
    steps:
      - name: Config Git
        run: |
          git config --global user.name "Alex Holenko"
          git config --global user.email "cat-begemot@live.com"

      - name: Get project version from .csproj
        id: version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" ./src/EventLog/EventLog.csproj)
          echo "Project version is $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Fetch the latest changes from the remote repository
        run: |
          git fetch --all
          
      - name: Create and push tag
        run: |
          NEW_TAG="v$VERSION"
          git tag $NEW_TAG
          echo "Tag created: $NEW_TAG"
          git push origin $NEW_TAG
                              
  release:
    name: Create release
    runs-on: ubuntu-24.04
    needs: tag_and_push
    if: success()
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      tag: ${{ github.ref_name }}
    steps: 
      - name: Create GitHub release
        run: |
          git fetch --tags
          NEW_TAG=$(git describe --tags --abbrev=0 origin/master)
          echo "Latest tag on master: $NEW_TAG"
          gh release create $NEW_TAG \
              --repo="$GITHUB_REPOSITORY" \
              --title="${NEW_TAG#v}" \
              --generate-notes \
              --generate-notes \
              --verify-tag \
              --latest
  
  create_nuget:
    name: Create NuGet
    runs-on: ubuntu-24.04
    needs: tag_and_push
    if: success()
    steps:
      - name: Pack
        shell: pwsh
        run: dotnet pack .\src\EventLog --configuration Release --output ${{ env.NuGetDirectory }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg
          
  deploy:
    name: Deploy NuGet
    runs-on: ubuntu-24.04
    needs: create_nuget
    if: success()
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Publish NuGet package
        shell: pwsh
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }